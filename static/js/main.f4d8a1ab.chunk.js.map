{"version":3,"sources":["components/form/Form.js","components/results/Results.js","components/App.js","utils/formulas.js","index.js"],"names":["Form","props","React","useState","percentActive","setPercentActive","handlePercentClick","e","onPercentChange","target","value","className","onSubmit","htmlFor","cost","displayType","thousandSeparator","isNumericString","onValueChange","onCostChange","placeholder","id","initialCost","onInitCostChange","map","item","onClick","data-testid","period","onPeriodChange","interestRate","onInterestChange","type","onClear","Results","monthlyPayment","decimalScale","requiredIncome","overPayment","loanAmount","App","localStorage","getItem","setCost","setInitialCost","setPeriod","setInterestRate","countLoanAmount","result","isNaN","countMonthlyPayment","countRequiredIncome","countOverpayment","values","preventDefault","setItem","clear","percent","countInitialCost","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f4d8a1ab.chunk.js","sourcesContent":["import React from 'react';\r\nimport NumberFormat from \"react-number-format\";\r\nimport './Form.css';\r\n\r\nfunction Form(props) {\r\n    const percentsArr = [10, 15, 20, 25, 30];\r\n    const [percentActive, setPercentActive] = React.useState(null);\r\n\r\n    const handlePercentClick = (e) => {\r\n        props.onPercentChange(e);\r\n        setPercentActive(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <form className=\"form\" onSubmit={props.onSubmit} >\r\n            <div className=\"form__block\">\r\n                <label htmlFor=\"cost\" className=\"form__text\">Стоимость недвижимости</label>\r\n                <NumberFormat value={props.cost} displayType={'input'} thousandSeparator={' '} isNumericString={true}\r\n                              onValueChange={props.onCostChange} className=\"form__input\" placeholder=\"10 000 000\"\r\n                              id=\"cost\" />\r\n                <span className=\"form__symbol\">&#8381;</span>\r\n            </div>\r\n            <div className=\"form__block\">\r\n                <label htmlFor=\"initialCost\" className=\"form__text\">Первоначальный взнос</label>\r\n                <NumberFormat value={props.initialCost} displayType={'input'} thousandSeparator={' '} isNumericString={true}\r\n                              onValueChange={props.onInitCostChange} className=\"form__input\" placeholder=\"2 000 000\"\r\n                              id=\"initialCost\" />\r\n                <span className=\"form__symbol\">&#8381;</span>\r\n                <div className=\"form__percents\">\r\n                    { percentsArr.map(item => {\r\n                        return <button key={item} className={`percent-button ${percentActive == item && 'percent-button_active'}`}\r\n                                       value={item} onClick={handlePercentClick} data-testid={item}>{item} %</button>\r\n                    }) }\r\n                </div>\r\n            </div>\r\n            <div className=\"form__block\">\r\n                <label htmlFor=\"period\" className=\"form__text\">Срок кредита</label>\r\n                <NumberFormat value={props.period} displayType={'input'} thousandSeparator={' '} isNumericString={true}\r\n                              onValueChange={props.onPeriodChange} className=\"form__input\" placeholder=\"10\"\r\n                              id=\"period\" />\r\n                <span className=\"form__symbol\">лет</span>\r\n            </div>\r\n            <div className=\"form__block\">\r\n                <label htmlFor=\"interestRate\" className=\"form__text\">Процентная ставка</label>\r\n                <NumberFormat value={props.interestRate} displayType={'input'} thousandSeparator={' '} isNumericString={true}\r\n                              onValueChange={props.onInterestChange} className=\"form__input\" placeholder=\"10\"\r\n                              id=\"interestRate\" />\r\n                <span className=\"form__symbol\">&#37;</span>\r\n            </div>\r\n            <div className=\"form__buttons\">\r\n                <button type=\"submit\" className=\"form__submit button\">Save</button>\r\n                <button type=\"button\" className=\"form__clear button\" onClick={props.onClear}>Clear</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\nimport NumberFormat from \"react-number-format\";\r\nimport './Results.css';\r\n\r\nfunction Results(props) {\r\n    return (\r\n        <div className=\"results\">\r\n            <div>\r\n                <span>Ежемесячный платёж</span>\r\n                <p className=\"results__number results__payment\">{\r\n                    <NumberFormat value={props.monthlyPayment} decimalScale={0} displayType={'text'} thousandSeparator={' '} isNumericString={true} />\r\n                } &#8381;</p>\r\n            </div>\r\n            <div>\r\n                <span>Необходимый доход</span>\r\n                <p className=\"results__number results__income\">{\r\n                    <NumberFormat value={props.requiredIncome} decimalScale={0} displayType={'text'} thousandSeparator={' '} isNumericString={true} />\r\n                } &#8381;</p>\r\n            </div>\r\n            <div>\r\n                <span>Переплата</span>\r\n                <p className=\"results__number results__overpayment\">{\r\n                    <NumberFormat value={props.overPayment} decimalScale={0} displayType={'text'} thousandSeparator={' '} isNumericString={true} />\r\n                } &#8381;</p>\r\n            </div>\r\n            <div>\r\n                <span>Тело кредита</span>\r\n                <p className=\"results__number results__loan-amount\">{\r\n                    <NumberFormat value={props.loanAmount} decimalScale={0} displayType={'text'} thousandSeparator={' '} isNumericString={true} />\r\n                } &#8381;</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Results;","import React from 'react';\nimport './App.css';\n\nimport { countLoanAmount, countMonthlyPayment, countRequiredIncome, countOverpayment, countInitialCost } from \"../utils/formulas\";\nimport Form from \"./form/Form\";\nimport Results from \"./results/Results\";\n\nfunction App() {\n    const [cost, setCost] = React.useState(localStorage.getItem('cost') || '');\n    const [initialCost, setInitialCost] = React.useState(localStorage.getItem('initialCost') || '');\n    const [period, setPeriod] = React.useState(localStorage.getItem('period') || '');\n    const [interestRate, setInterestRate] = React.useState(localStorage.getItem('interestRate') || '');\n\n    const loanAmount = countLoanAmount(cost, initialCost);\n    const monthlyPayment = countMonthlyPayment(loanAmount, interestRate, period);\n    const requiredIncome = countRequiredIncome(monthlyPayment);\n    const overPayment = countOverpayment(monthlyPayment, period, loanAmount);\n\n\n    const handleCostChange = (values) => {\n        const {value} = values;\n        setCost(value);\n    }\n\n    const handleInitialCostChange = (values) => {\n        const {value} = values;\n        setInitialCost(value);\n    }\n\n    const handlePeriodChange = (values) => {\n        const {value} = values;\n        setPeriod(value);\n    }\n\n    const handleInterestRateChange = (values) => {\n        const {value} = values;\n        setInterestRate(value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        localStorage.setItem('cost', cost);\n        localStorage.setItem('initialCost', initialCost);\n        localStorage.setItem('period', period);\n        localStorage.setItem('interestRate', interestRate);\n    }\n\n    const handleClear = () => {\n        localStorage.clear();\n        setCost('');\n        setInitialCost('');\n        setPeriod('');\n        setInterestRate('');\n    }\n\n    const handlePercentClick = (e) => {\n        e.preventDefault();\n        setInitialCost(countInitialCost(cost, e.target.value));\n    }\n\n    return (\n        <div className=\"container\">\n\n            <Form onCostChange={handleCostChange} onInitCostChange={handleInitialCostChange} onPeriodChange={handlePeriodChange}\n                onInterestChange={handleInterestRateChange} onSubmit={handleSubmit} onClear={handleClear}\n                onPercentChange={handlePercentClick} cost={cost} initialCost={initialCost} period={period}\n                interestRate={interestRate} />\n\n            <Results loanAmount={loanAmount} monthlyPayment={monthlyPayment} requiredIncome={requiredIncome}\n                     overPayment={overPayment} />\n\n        </div>\n    );\n}\n\nexport default App;\n","const countLoanAmount = (cost, initialCost) => {\r\n    return (cost - initialCost);\r\n}\r\n\r\nconst countMonthlyPayment = (loanAmount, interestRate, period) => {\r\n    let result = ( loanAmount * ( (interestRate / 1200) + ( (interestRate / 1200) / (((1 + (interestRate / 1200)) ** (period*12)) - 1) ) ) );\r\n    return isNaN(result) ? 0 : result;\r\n}\r\n\r\nconst countRequiredIncome = (monthlyPayment) => {\r\n    return ( 5 * (monthlyPayment / 3) );\r\n}\r\n\r\nconst countOverpayment = (monthlyPayment, period,  loanAmount) => {\r\n    return ( monthlyPayment * period * 12 - loanAmount );\r\n}\r\n\r\n/* exported countInitialCost */\r\nconst countInitialCost = (cost, percent) => {\r\n    return (cost * percent / 100);\r\n}\r\n\r\nexport { countLoanAmount, countMonthlyPayment, countRequiredIncome, countOverpayment, countInitialCost };\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}